name: Deploy Frontend (native scp + sudo tar)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Git ref to deploy
        default: main
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || 'main' }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Build
        run: |
          set -euxo pipefail
          npm ci
          npm run build
          du -sh dist || true
          tar -C dist -czf dist.tar.gz .

      - name: Push dist.tar.gz with native scp and deploy
        env:
          HOST: ${{ secrets.DROPLET_HOST }}
          USER: ${{ secrets.DROPLET_USER }}
          PORT: ${{ secrets.DROPLET_SSH_PORT || 22 }}
          SSH_KEY: ${{ secrets.DROPLET_SSH_KEY }}
          REMOTE_TAR: /tmp/app_dist_${{ github.run_id }}_${{ github.run_attempt }}.tar.gz
        run: |
          set -euxo pipefail

          # write SSH key & prime known_hosts
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          printf '%s\n' "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

          # copy the tarball (native scp avoids the action’s OS mis-detect)
          scp -P "$PORT" -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes dist.tar.gz "$USER@$HOST:$REMOTE_TAR"

          # unpack into /var/www/app and reload nginx — no stdin to sudo
          ssh -p "$PORT" -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "$USER@$HOST" "
            set -euo pipefail
            : > ~/.hushlogin || true
            sudo mkdir -p /var/www/app
            echo 'Space before:'; df -h /var/www || true
            sudo tar -xzf '$REMOTE_TAR' -C /var/www/app
            sudo rm -f '$REMOTE_TAR'
            echo 'Space after:'; df -h /var/www || true
            sudo systemctl reload nginx
          "
