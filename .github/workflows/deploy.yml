name: Deploy Frontend (SSH stream + sudo tar)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Git ref to deploy
        default: main
        required: true

concurrency:
  group: deploy-frontend
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || 'main' }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Build
        run: |
          set -euxo pipefail
          npm ci
          npm run build
          test -f dist/index.html
          # package the build
          tar -C dist -czf dist.tar.gz .
          # compute checksum for integrity
          sha256sum dist.tar.gz | awk '{print $1}' > dist.sha256

      - name: Upload & deploy over raw SSH
        env:
          HOST: ${{ secrets.DROPLET_HOST }}
          USER: ${{ secrets.DROPLET_USER }}
          PORT: ${{ secrets.DROPLET_SSH_PORT || 22 }}
          SSH_KEY: ${{ secrets.DROPLET_SSH_KEY }}
          REMOTE_TAR: /tmp/app_dist_${{ github.run_id }}_${{ github.run_attempt }}.tar.gz
        run: |
          set -euxo pipefail

          # --- SSH prep ---
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          printf '%s\n' "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

          SSH_OPTS="-p $PORT -i ~/.ssh/id_rsa \
            -o IdentitiesOnly=yes -o BatchMode=yes -o PreferredAuthentications=publickey \
            -o StrictHostKeyChecking=yes -o LogLevel=ERROR \
            -o ServerAliveInterval=30 -o ServerAliveCountMax=10 -o RequestTTY=no -T"

          # quiet future logins a bit; install tar if it was missing (rare)
          ssh $SSH_OPTS "$USER@$HOST" 'set -e; : > ~/.hushlogin || true; command -v tar >/dev/null || sudo apt-get update -y && sudo apt-get install -y tar'

          # --- Upload artifact robustly (no rsync/scp protocol) ---
          # stream the tarball
          cat dist.tar.gz | ssh $SSH_OPTS "$USER@$HOST" "set -euo pipefail; cat > '$REMOTE_TAR'"
          # upload checksum
          CHECKSUM="$(cat dist.sha256)"
          printf '%s\n' "$CHECKSUM" | ssh $SSH_OPTS "$USER@$HOST" "set -euo pipefail; cat > '$REMOTE_TAR.sha256'"

          # --- Verify & deploy ---
          ssh $SSH_OPTS "$USER@$HOST" "
            set -euo pipefail
            # verify checksum on remote
            echo \"$CHECKSUM  $REMOTE_TAR\" | sha256sum -c -
            # ensure target dir and extract
            sudo mkdir -p /var/www/app
            echo 'Space before:'; df -h /var/www || true
            sudo tar -xzf '$REMOTE_TAR' -C /var/www/app
            # cleanup and reload
            sudo rm -f '$REMOTE_TAR' '$REMOTE_TAR.sha256'
            echo 'Space after:'; df -h /var/www || true
            sudo systemctl reload nginx
          "
