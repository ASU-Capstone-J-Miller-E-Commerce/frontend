name: Deploy Frontend (quiet rsync)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Git ref to deploy
        default: main
        required: true

concurrency:
  group: deploy-frontend
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || 'main' }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Build
        run: |
          set -euxo pipefail
          npm ci
          npm run build
          test -f dist/index.html

      - name: Deploy via rsync (quiet, non-tty)
        env:
          HOST: ${{ secrets.DROPLET_HOST }}
          USER: ${{ secrets.DROPLET_USER }}
          PORT: ${{ secrets.DROPLET_SSH_PORT || 22 }}
          SSH_KEY: ${{ secrets.DROPLET_SSH_KEY }}
        run: |
          set -euxo pipefail

          # Write SSH key & known_hosts
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          printf '%s\n' "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

          # SSH options: no TTY, quiet, pubkey only
          SSH_OPTS="-p $PORT -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o BatchMode=yes -o PreferredAuthentications=publickey -o StrictHostKeyChecking=yes -o LogLevel=ERROR -o ServerAliveInterval=30 -o ServerAliveCountMax=10 -o RequestTTY=no -T"

          # Hard remote temp path (no custom env needed)
          RTMP="/tmp/app_tmp_${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}"

          # Preflight: ensure remote shell is QUIET (no stray echoes/MOTD).
          CLEAN="$(ssh $SSH_OPTS "$USER@$HOST" 'set -eu; : > ~/.hushlogin || true; printf "__CLEAN__"')"
          if [ "$CLEAN" != "__CLEAN__" ]; then
            echo "Remote login produced unexpected output (likely from ~/.bashrc or MOTD)."
            echo 'Fix by guarding shell init with: [ -n "$PS1" ] || return'
            exit 1
          fi

          # Ensure rsync exists and prep temp dir
          ssh $SSH_OPTS "$USER@$HOST" "
            set -e
            command -v rsync >/dev/null || { sudo apt-get update -y && sudo apt-get install -y rsync; }
            rm -rf '$RTMP'
            mkdir -p '$RTMP'
          "

          # Rsync build to temp dir (quiet, no TTY)
          rsync -az --delete -e "ssh $SSH_OPTS" dist/ "$USER@$HOST:$RTMP/"

          # Promote into /var/www/app and reload nginx (no stdin to sudo)
          ssh $SSH_OPTS "$USER@$HOST" "
            set -euo pipefail
            sudo mkdir -p /var/www/app
            sudo rsync -av --delete '$RTMP'/ /var/www/app/
            rm -rf '$RTMP'
            sudo systemctl reload nginx
          "
